name: Build Inviwo

on: [push]

env:
  BUILD_TYPE: Release
  IVW_VCPKG_SHA: '66bac12e4e54cc858bdf7f93c5786010b6812b13'   # vcpkg "version" to use
  #IVW_VCPKG_SHA: '399458a9d9a763c0e06cc979464a17074fe8517d'  # nuget verbose version, git remote add inviwo https://github.com/inviwo/vcpkg.git
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'        # recognized by vcpkg
  # QT_DEBUG_PLUGINS: 1                                         # print qt plugin debug info
  MODULE_NAME: markettestmodule

jobs:
  build:
    strategy:
      matrix:
#        os: [windows-latest, macos-latest, ubuntu-20.04]
        os: [windows-latest]
        include:
          - os: 'windows-latest'
            triplet: 'x64-windows'
            mono: ''
            cmake: '-DIVW_MODULE_HDF5=ON'
            generator: 'Visual Studio 16 2019'
#          - os: 'macos-latest'
#            triplet: 'x64-osx'
#            mono: 'mono'
#            cmake: '-DIVW_MODULE_HDF5=OFF'
#            generator: 'Ninja'
#          - os: 'ubuntu-20.04'
#            triplet: 'x64-linux'
#            mono: 'mono'
#            cmake: '-DIVW_USE_SIGAR=OFF -DIVW_MODULE_HDF5=OFF'
#            generator: 'Ninja'
      fail-fast: false

    runs-on: ${{ matrix.os }}
    timeout-minutes: 360

    steps:
    - name: Setup VCPKG
      shell: bash
      run: |
        set -x
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        git fetch --all
        git reset --hard $IVW_VCPKG_SHA
        ./bootstrap-vcpkg.sh

    - name: 'Setup NuGet Credentials'
      shell: bash
      run: >
        ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/inviwo/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "inviwo"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: Apt Install
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libglew-dev ninja-build doxygen-latex

    - name: Brew Install
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install ninja doxygen
        brew install --cask basictex
        eval "$(/usr/libexec/path_helper)"
        echo "$(dirname $(which latex))" >> $GITHUB_PATH

    - name: Install Scoop
      if: runner.os == 'Windows'
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop bucket add extras
        scoop install nsis doxygen latex
        echo "~/scoop/shims" >> $GITHUB_PATH
        echo "$(Split-Path -Path (Get-Command dvips).Path -Parent)" >> $GITHUB_PATH

#    - name: VCPKG Install
#      shell: bash
#      run: >
#        vcpkg --triplet ${{ matrix.triplet }} install
#        assimp benchmark cimg eigen3 fmt freetype glfw3 glm gtest zlib
#        hdf5[cpp,zlib] libjpeg-turbo libpng minizip nlohmann-json
#        openexr pybind11 python3 tclap tiff tinydir tinyxml2 utfcpp

    - name: Glew Install
      shell: bash
      if: runner.os != 'Linux'
      run: vcpkg --triplet ${{ matrix.triplet }} install glew

    - name: Install Numpy
      shell: bash
      run: pip3 install numpy

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.15.0
        dir: ${{ github.workspace }}

    - uses: actions/checkout@v2
      with:
        path: inviwo
        submodules: recursive

    - name: Configure CMake
      shell: bash
      run: >
        cmake -S inviwo -B build -G '${{ matrix.generator }}'
        -DVCPKG_TARGET_TRIPLET='${{ matrix.triplet }}'
        -DCMAKE_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        -DIVW_CFG_CMAKE_DEBUG=ON
        -DIVW_CFG_PRECOMPILED_HEADERS=OFF
        -DIVW_CFG_FORCE_ASSERTIONS=ON
        -DIVW_DOXYGEN_PROJECT=ON
        -DIVW_PACKAGE_INSTALLER=ON
        -DIVW_TEST_UNIT_TESTS_RUN_ON_BUILD=OFF
        -DIVW_TEST_BENCHMARKS=OFF
        -DIVW_TEST_INTEGRATION_TESTS=ON
        -DIVW_USE_OPENMP=OFF
        -DIVW_USE_OPENEXR=OFF
        -DIVW_MODULE_CIMG=ON
        -DIVW_MODULE_PYTHON3=OFF
        -DIVW_MODULE_PYTHON3QT=OFF
        -DIVW_MODULE_DATAFRAMEPYTHON=OFF
        -DIVW_PACKAGE_EMBED_PYTHON=OFF
        -DIVW_APP_PYTHON=OFF
        -DIVW_MODULE_MARKETTESTMODULE=ON
        -DIVW_USE_EXTERNAL_ASSIMP=ON
        -DIVW_USE_EXTERNAL_BENCHMARK=ON
        -DIVW_USE_EXTERNAL_EIGEN=ON
        -DIVW_USE_EXTERNAL_FMT=ON
        -DIVW_USE_EXTERNAL_FREETYPE=ON
        -DIVW_USE_EXTERNAL_GLFW=ON
        -DIVW_USE_EXTERNAL_GLM=ON
        -DIVW_USE_EXTERNAL_GTEST=ON
        -DIVW_USE_EXTERNAL_HDF5=ON
        -DIVW_USE_EXTERNAL_IMG=ON
        -DIVW_USE_EXTERNAL_JSON=ON
        -DIVW_USE_EXTERNAL_CIMG=ON
        -DIVW_USE_EXTERNAL_GLEW=ON
        -DIVW_USE_EXTERNAL_TCLAP=ON
        -DIVW_USE_EXTERNAL_UTFCPP=ON
        -DIVW_USE_EXTERNAL_TINYDIR=ON
        -DIVW_USE_EXTERNAL_PYBIND11=ON
        -DIVW_USE_EXTERNAL_OPENEXR=ON
        ${{ matrix.cmake }}

    - name: Setup C++
      uses: Trass3r/setup-cpp@v1

    - name: Build
      timeout-minutes: 180
      working-directory: build
      shell: bash
      run: cmake --build . --config ${{ env.BUILD_TYPE }} --parallel

    - name: Zip Module Data
      uses: papeloto/action-zip@v1
      with:
        files: build/bin/Release/inviwo-module-${{ env.MODULE_NAME }}.dll build/modules/${{ env.MODULE_NAME }}/
        dest: ${{ env.MODULE_NAME }}.zip

    - name: Release Module Artifact
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automatic Release to Inviwo Marketplace.
          draft: false
          prerelease: false

    - name: Upload Release Assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ env.MODULE_NAME }}.zip
        asset_name: ${{ env.MODULE_NAME }}.zip
        asset_content_type: application/zip
